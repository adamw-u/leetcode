#
# @lc app=leetcode.cn id=122 lang=python3
#
# [122] 买卖股票的最佳时机 II
#

# 给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。

# 在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。

# 返回 你能获得的 最大 利润 。

 

# 示例 1：

# 输入：prices = [7,1,5,3,6,4]
# 输出：7
# 解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4。
# 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3。
# 最大总利润为 4 + 3 = 7 。
# 示例 2：

# 输入：prices = [1,2,3,4,5]
# 输出：4
# 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4。
# 最大总利润为 4 。
# 示例 3：

# 输入：prices = [7,6,4,3,1]
# 输出：0
# 解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0。

# @lc code=start
from typing import List
class Solution:
    """
    思路：
        1. 每天有两种动作 买/卖 两种状态 有/没有股票
        2. 按照状态建立状态方程，初始利润：[0,-p0]  第0步代表手里了没有，第1步代表有
            状态转移方程为 
            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - pi)   上一步手里也有股票/上一步手里没有本次买入
            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + pi)   上一步手里也没有股票/上一步手里有本次卖出
    """
    def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        dp = [[0, -prices[0]] for _ in range(n)]
        for i in range(1, n):
            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])
        # print(dp)
        return dp[-1][0] # 最后手里没有股票利润最大

# @lc code=end

