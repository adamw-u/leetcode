#
# @lc app=leetcode.cn id=123 lang=python3
#
# [123] 买卖股票的最佳时机 III
#

# 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

# 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。

# 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。



# 示例 1:

# 输入：prices = [3,3,5,0,0,3,1,4]
# 输出：6
# 解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
#      随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
# 示例 2：

# 输入：prices = [1,2,3,4,5]
# 输出：4
# 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   
#      注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   
#      因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
# 示例 3：

# 输入：prices = [7,6,4,3,1] 
# 输出：0 
# 解释：在这个情况下, 没有交易完成, 所以最大利润为 0。
# 示例 4：

# 输入：prices = [1]
# 输出：0

# @lc code=start
from typing import List
class Solution:
    """
    思路:
        1. dp[i][k][j] 作为递推方程表示,其中i代表股票在不同天的价格,k代表最大交易次数,j代表股票持有状态
        2. 其中 第k次交易可获得的利润依赖与第k-1次交易利润，所以k需要倒序遍历
    """
    def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)

        k = min(2, n//2)
        dp = [[[0, -prices[0]] for _ in range(k+1)] for _ in range(n)]
        ## 这里注意点,直接扩展成最多k次交易，k<=n//2，如果k>=n//2也最多能完成n//2次买卖
        
        for i in range(1, n):
            for j in range(k, 0, -1):   # 代表第i次交易
                dp[i][j][0] =  max(dp[i-1][j][0], dp[i-1][j][1] + prices[i])  # 不持有  上一步也不持有完成了j次交易，上一次持有本次卖出+prices[i]变不持有，完整交易次数+1
                dp[i][j][1] =  max(dp[i-1][j][1], dp[i-1][j-1][0] - prices[i])  # 持有，  上一步持有完成了j次交易，上一次不持有本次买入-prices[i]变持有，交易次数+1（等待卖出）

        return dp[-1][k][0]

# @lc code=end

