# 题目地址
# https://leetcode-cn.com/problems/new-21-game


# 题目描述
# 爱丽丝参与一个大致基于纸牌游戏 “21点” 规则的游戏，描述如下：

# 爱丽丝以 0 分开始，并在她的得分少于 K 分时抽取数字。 抽取时，她从 [1, W] 的范围中随机获得一个整数作为分数进行累计，其中 W 是整数。 每次抽取都是独立的，其结果具有相同的概率。

# 当爱丽丝获得不少于 K 分时，她就停止抽取数字。 爱丽丝的分数不超过 N 的概率是多少？

 

# 示例 1：

# 输入：N = 10, K = 1, W = 10
# 输出：1.00000
# 说明：爱丽丝得到一张卡，然后停止。
# 示例 2：

# 输入：N = 6, K = 1, W = 10
# 输出：0.60000
# 说明：爱丽丝得到一张卡，然后停止。
# 在 W = 10 的 6 种可能下，她的得分不超过 N = 6 分。
# 示例 3：

# 输入：N = 21, K = 17, W = 10
# 输出：0.73278
 

# 提示：

# 0 <= K <= N <= 10000
# 1 <= W <= 10000
# 如果答案与正确答案的误差不超过 10^-5，则该答案将被视为正确答案通过。
# 此问题的判断限制时间已经减少。


# 整个过程中，爱丽丝手里的牌面的可能情况为 [0, K + W - 1]
# dp数组用于记录每一种牌面下，到最终停止抽牌时牌面不大于N的概率
# 当手中牌面 >= K 时，概率可以确定，大于N为0，小于等于N为1
# 当手中牌面 == K - 1 时，再抽[1, W]中任意一张牌都会停止抽牌，那么在该种情况下，所求概率为
# dp[K - 1] = 1/W * (dp[K] + dp[K + 1] + … + dp[K + W - 1])
# 当手中牌面 == K - 2 时，可分为以下两种情况
#     i. 再抽一张1变成 K - 1，到最后停止抽牌，概率为 1/W * dp[K - 1]
#     ii.再抽[2, W]区间内的任意一张牌，停止抽牌，总的概率为 1/W * (dp[K] + dp[K + 1] + … + dp[K + W - 2])
# 最后 dp[K - 2] = 1/W * (dp[K - 1] + dp[K] + … + dp[K + W - 2])
# 其他牌面小于K的情况也类似，都是取后面W个概率的均值
# 最后的返回值为dp[0]，即爱丽丝还没开始抽牌的时候，其最终停止抽牌时牌面不大于N的概率


class Solution:
    def new21Game(self, N: int, K: int, W: int) -> float:
        """
        逆序dp, w为滑动窗口大小
        """
        dp = [0] * (K + W)

        s = 0 
        for i in range(K, K + W):
            dp[i] = 1 if i <= N else 0
            s += dp[i]
        for i in range(K - 1, -1, -1):
            dp[i] = s / W
            s += dp[i] - dp[i + W] # 每次累加的格子保持w个数
        return dp[0]


so = Solution()
N = 21
K = 17
W = 10
print(so.new21Game(5, 4, 3))
